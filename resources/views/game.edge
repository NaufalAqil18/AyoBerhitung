<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🧠 Cepat Hitung - Game</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Fredoka+One:wght@400&family=Nunito:wght@300;400;600;700;800&display=swap');
        
        body { 
            background: linear-gradient(135deg, #e8f5e8 0%, #f0f8f0 50%, #e8f5e8 100%);
            font-family: 'Nunito', sans-serif;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        /* Floating math symbols animation */
        .floating-math {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }
        
        .math-symbol {
            position: absolute;
            font-size: 1.5rem;
            color: rgba(126, 217, 87, 0.1);
            animation: floatMath 8s ease-in-out infinite;
            font-weight: bold;
        }
        
        .math-symbol:nth-child(1) { left: 5%; top: 10%; animation-delay: 0s; }
        .math-symbol:nth-child(2) { left: 15%; top: 30%; animation-delay: 2s; }
        .math-symbol:nth-child(3) { left: 85%; top: 20%; animation-delay: 4s; }
        .math-symbol:nth-child(4) { left: 90%; top: 60%; animation-delay: 1s; }
        .math-symbol:nth-child(5) { left: 10%; top: 70%; animation-delay: 3s; }
        .math-symbol:nth-child(6) { left: 80%; top: 80%; animation-delay: 5s; }
        
        @keyframes floatMath {
            0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.1; }
            50% { transform: translateY(-30px) rotate(180deg); opacity: 0.3; }
        }
        
        .game-card { 
            background: linear-gradient(135deg, #fff 0%, #f8fff8 100%);
            border-radius: 30px; 
            box-shadow: 0 10px 30px rgba(126, 217, 87, 0.15); 
            padding: 3rem 2.5rem; 
            margin: 2rem auto; 
            max-width: 550px;
            border: 3px solid #7ed957;
            position: relative;
            z-index: 2;
            overflow: hidden;
        }
        
        .game-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 6px;
            background: linear-gradient(90deg, #7ed957, #6bc943, #59c230, #7ed957);
            background-size: 200% 100%;
            animation: shimmer 3s ease-in-out infinite;
        }
        
        @keyframes shimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }
        
        .game-title { 
            color: #7ed957; 
            font-family: 'Fredoka One', cursive;
            font-size: 2.5rem; 
            font-weight: 400; 
            text-align: center; 
            margin-bottom: 1.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
            animation: pulse 2s ease-in-out infinite alternate;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            100% { transform: scale(1.05); }
        }
        
        .timer { 
            font-family: 'Nunito', sans-serif;
            font-size: 1.5rem; 
            font-weight: 800; 
            color: #ff6f00; 
            text-align: center; 
            margin-bottom: 1.5rem;
            background: linear-gradient(45deg, #fff3e0, #ffe0b2);
            border: 3px solid #ff9800;
            border-radius: 20px;
            padding: 0.8rem 1.5rem;
            box-shadow: 0 4px 15px rgba(255, 152, 0, 0.2);
            animation: timerPulse 1s ease-in-out infinite alternate;
        }
        
        @keyframes timerPulse {
            0% { box-shadow: 0 4px 15px rgba(255, 152, 0, 0.2); }
            100% { box-shadow: 0 6px 20px rgba(255, 152, 0, 0.4); }
        }
        
        .question { 
            font-family: 'Nunito', sans-serif;
            font-size: 2rem; 
            font-weight: 700; 
            text-align: center; 
            margin-bottom: 1.5rem;
            color: #333;
            background: linear-gradient(45deg, #e3f2fd, #f1f8e9);
            border-radius: 20px;
            padding: 1.5rem;
            border: 2px solid #7ed957;
            animation: questionBounce 0.5s ease-out;
        }
        
        @keyframes questionBounce {
            0% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .score-info { 
            font-size: 1.2rem; 
            text-align: center; 
            margin-bottom: 1.5rem;
            color: #666;
            font-weight: 600;
            line-height: 1.4;
        }
        
        .form-control {
            border: 3px solid #7ed957;
            border-radius: 15px;
            font-size: 1.4rem;
            font-weight: 700;
            text-align: center;
            padding: 0.8rem;
            box-shadow: 0 4px 15px rgba(126, 217, 87, 0.1);
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            border-color: #59c230;
            box-shadow: 0 0 0 0.2rem rgba(126, 217, 87, 0.25), 0 6px 20px rgba(126, 217, 87, 0.2);
            transform: scale(1.05);
        }
        
        .btn-main { 
            background: linear-gradient(45deg, #7ed957, #6bc943); 
            color: #fff; 
            font-family: 'Nunito', sans-serif;
            font-weight: 700; 
            border: none;
            border-radius: 20px;
            padding: 0.8rem 2rem;
            font-size: 1.2rem;
            box-shadow: 0 4px 15px rgba(126, 217, 87, 0.3);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        
        .btn-main::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.5s;
        }
        
        .btn-main:hover::before {
            left: 100%;
        }
        
        .btn-main:hover { 
            background: linear-gradient(45deg, #59c230, #4a9e2a); 
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 8px 25px rgba(126, 217, 87, 0.4);
        }
        
        #startBtn {
            font-size: 1.4rem;
            padding: 1rem 2.5rem;
            animation: startButtonGlow 2s ease-in-out infinite alternate;
        }
        
        @keyframes startButtonGlow {
            0% { box-shadow: 0 4px 15px rgba(126, 217, 87, 0.3); }
            100% { box-shadow: 0 8px 30px rgba(126, 217, 87, 0.6); }
        }
        
        .result-modal { 
            display: none; 
            position: fixed; 
            top: 0; 
            left: 0; 
            width: 100vw; 
            height: 100vh; 
            background: rgba(0,0,0,0.6); 
            z-index: 1000; 
            align-items: center; 
            justify-content: center;
            backdrop-filter: blur(5px);
        }
        
        .result-content { 
            background: linear-gradient(135deg, #fff 0%, #f8fff8 100%);
            border-radius: 25px; 
            padding: 3rem 2.5rem; 
            box-shadow: 0 15px 40px rgba(0,0,0,0.2); 
            text-align: center;
            border: 3px solid #7ed957;
            max-width: 400px;
            animation: modalSlideIn 0.5s ease-out;
        }
        
        @keyframes modalSlideIn {
            0% { transform: scale(0.7) translateY(-50px); opacity: 0; }
            100% { transform: scale(1) translateY(0); opacity: 1; }
        }
        
        .result-title { 
            color: #7ed957; 
            font-family: 'Fredoka One', cursive;
            font-size: 2rem; 
            font-weight: 400; 
            margin-bottom: 1.5rem;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        
        .result-content .mb-2 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #555;
            margin-bottom: 1rem;
            padding: 0.5rem;
            background: rgba(126, 217, 87, 0.1);
            border-radius: 10px;
        }
        
        .btn-secondary {
            background: linear-gradient(45deg, #6c757d, #5a6268);
            border: none;
            border-radius: 20px;
            padding: 0.8rem 1.5rem;
            font-weight: 600;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
            transition: all 0.3s ease;
        }
        
        .btn-secondary:hover {
            background: linear-gradient(45deg, #5a6268, #495057);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
        }
        
        /* Fun decorative elements */
        .game-card::after {
            content: '🎯';
            position: absolute;
            top: 1rem;
            right: 1.5rem;
            font-size: 1.5rem;
            animation: rotate 4s linear infinite;
        }
        
        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .game-card {
                margin: 1rem;
                padding: 2rem 1.5rem;
                max-width: 90%;
            }
            
            .game-title {
                font-size: 2rem;
            }
            
            .question {
                font-size: 1.6rem;
                padding: 1rem;
            }
            
            .timer {
                font-size: 1.2rem;
                padding: 0.6rem 1rem;
            }
            
            .result-content {
                margin: 1rem;
                padding: 2rem 1.5rem;
            }
        }
        
        /* Special effects for correct answers */
        .correct-flash {
            animation: correctFlash 0.6s ease-out;
        }
        
        @keyframes correctFlash {
            0% { background-color: #d4edda; }
            100% { background-color: transparent; }
        }
        
        /* Loading animation for new questions */
        .question-loading {
            animation: questionLoad 0.3s ease-in-out;
        }
        
        @keyframes questionLoad {
            0% { opacity: 0; transform: translateX(-20px); }
            100% { opacity: 1; transform: translateX(0); }
        }
    </style>
</head>
<body>
    <div class="container-fluid">
      <div class="row">
        <div class="col-auto p-0">
          @set('activePage', 'game')
          @include('partials.sidebar')
        </div>
        <div class="col ps-0 pe-4" style="min-height:100vh;">
          <!-- Main game content below -->
          <div class="container">
            <div class="game-card">
                <div class="game-title">🧠 Cepat Hitung</div>
                <div class="score-info mb-2">Jawab soal penjumlahan, pengurangan, perkalian, pembagian, atau campuran secepat mungkin dalam 1 menit!</div>
                <div class="timer" id="timer">Sisa waktu: 01:00</div>
                <div id="gameArea" class="">
                    <div class="question" id="questionText">Klik Mulai untuk memulai permainan!</div>
                    <form id="answerForm" class="d-flex justify-content-center align-items-center gap-2 mb-3" style="display:none;" autocomplete="off" onsubmit="return false;">
                        <input type="number" id="answerInput" class="form-control" style="width:120px; font-size:1.2rem;" placeholder="Jawaban" autocomplete="off" required />
                        <button class="btn btn-main" id="submitBtn">Jawab</button>
                    </form>
                    <div class="d-flex justify-content-center">
                        <button class="btn btn-main" id="startBtn">Mulai</button>
                    </div>
                </div>
            </div>
          </div>
          <div class="result-modal" id="resultModal">
            <div class="result-content">
                <div class="result-title">⏰ Waktu Habis!</div>
                <div class="mb-2">Jumlah soal dijawab: <span id="attemptedCount"></span> dari 20</div>
                <div class="mb-2">Jawaban benar: <span id="correctCount"></span></div>
                <div class="mb-2">Skor: <span id="score"></span></div>
                <button class="btn btn-main mt-2" onclick="window.location.reload()">Main Lagi</button>
                <a href="/game" class="btn btn-secondary mt-2 ms-2">Kembali</a>
            </div>
        </div>
        </div>
      </div>
    </div>
    <script>
        // Generate 20 random questions (addition, subtraction, multiplication, division, or mixed)
        function getRandomInt(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
        function generateQuestion() {
            var ops = ['+', '-', 'x', '÷'];
            var op = ops[getRandomInt(0, 3)];
            var a, b, question, answer;
            switch(op) {
                case '+':
                    a = getRandomInt(5, 99); b = getRandomInt(5, 99);
                    question = a + ' + ' + b;
                    answer = a + b;
                    break;
                case '-':
                    a = getRandomInt(10, 99); b = getRandomInt(5, a); // ensure non-negative
                    question = a + ' - ' + b;
                    answer = a - b;
                    break;
                case 'x':
                    a = getRandomInt(2, 12); b = getRandomInt(2, 12);
                    question = a + ' x ' + b;
                    answer = a * b;
                    break;
                case '÷':
                    b = getRandomInt(2, 12); answer = getRandomInt(2, 12); a = b * answer;
                    question = a + ' ÷ ' + b;
                    break;
            }
            return { question: question, answer: answer };
        }
        function generateQuestions(n) {
            var arr = [];
            for (var i = 0; i < n; i++) arr.push(generateQuestion());
            return arr;
        }
        // Game logic
        var questions = [];
        var current = 0;
        var correct = 0;
        var attempted = 0;
        var timer = 60;
        var interval = null;
        var started = false;
        var timerEl = document.getElementById('timer');
        var questionText = document.getElementById('questionText');
        var answerForm = document.getElementById('answerForm');
        var answerInput = document.getElementById('answerInput');
        var submitBtn = document.getElementById('submitBtn');
        var startBtn = document.getElementById('startBtn');
        var resultModal = document.getElementById('resultModal');
        var attemptedCount = document.getElementById('attemptedCount');
        var correctCount = document.getElementById('correctCount');
        var scoreEl = document.getElementById('score');
        function updateTimer() {
            var m = Math.floor(timer / 60).toString();
            if (m.length < 2) m = '0' + m;
            var s = (timer % 60).toString();
            if (s.length < 2) s = '0' + s;
            timerEl.textContent = 'Sisa waktu: ' + m + ':' + s;
        }
        function showQuestion() {
            if (current >= questions.length) {
                endGame();
                return;
            }
            questionText.textContent = 'Soal ' + (current+1) + ': ' + questions[current].question;
            answerInput.value = '';
            answerInput.focus();
        }
        function startGame() {
            questions = generateQuestions(20);
            current = 0; correct = 0; attempted = 0; timer = 60; started = true;
            startBtn.style.display = 'none';
            answerForm.style.display = '';
            showQuestion();
            updateTimer();
            interval = setInterval(function() {
                timer--;
                updateTimer();
                if (timer <= 0) endGame();
            }, 1000);
        }
        function endGame() {
            if (!started) return;
            started = false;
            clearInterval(interval);
            answerForm.style.display = 'none';
            questionText.textContent = 'Permainan selesai!';
            attemptedCount.textContent = attempted;
            correctCount.textContent = correct;
            scoreEl.textContent = attempted > 0 ? (correct/attempted*100).toFixed(1) + '%' : '0%';
            resultModal.style.display = 'flex';
        }
        answerForm.addEventListener('submit', function(e) {
            e.preventDefault();
            if (!started) return;
            var userAns = answerInput.value.trim();
            if (userAns === '') return;
            attempted++;
            if (parseInt(userAns) === questions[current].answer) correct++;
            current++;
            if (timer > 0) showQuestion();
        });
        startBtn.addEventListener('click', startGame);
        // Modal close on click outside
        resultModal.addEventListener('click', function(e) {
            if (e.target === resultModal) resultModal.style.display = 'none';
        });
    </script>
</body>
</html>